//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34209.
// 
#pragma warning disable 1591

namespace AsmodatForex.com.efxnow.democharting.chartingservice {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ChartingServiceSoap", Namespace="www.GainCapital.com.WebServices/")]
    public partial class ChartingService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private Authenticator authenticatorValueField;
        
        private System.Threading.SendOrPostCallback GetChartBlotterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLatestChartDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPreviousChartDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChartDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFlashChartDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnonymousFlashChartDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAnonymousChartBlotterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChartsBlotterWithFixedBarsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChartImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetChartsBlotterWithDateTimeFixedBarsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHistoricalSpreadsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRateComparisonChartDataOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ChartingService() {
            this.Url = global::AsmodatForex.Properties.Settings.Default.AsmodatForex_com_efxnow_democharting_chartingservice_ChartingService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public Authenticator AuthenticatorValue {
            get {
                return this.authenticatorValueField;
            }
            set {
                this.authenticatorValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetChartBlotterCompletedEventHandler GetChartBlotterCompleted;
        
        /// <remarks/>
        public event GetLatestChartDataCompletedEventHandler GetLatestChartDataCompleted;
        
        /// <remarks/>
        public event GetPreviousChartDataCompletedEventHandler GetPreviousChartDataCompleted;
        
        /// <remarks/>
        public event GetChartDataCompletedEventHandler GetChartDataCompleted;
        
        /// <remarks/>
        public event GetFlashChartDataCompletedEventHandler GetFlashChartDataCompleted;
        
        /// <remarks/>
        public event GetAnonymousFlashChartDataCompletedEventHandler GetAnonymousFlashChartDataCompleted;
        
        /// <remarks/>
        public event GetAnonymousChartBlotterCompletedEventHandler GetAnonymousChartBlotterCompleted;
        
        /// <remarks/>
        public event GetChartsBlotterWithFixedBarsCompletedEventHandler GetChartsBlotterWithFixedBarsCompleted;
        
        /// <remarks/>
        public event GetChartImageCompletedEventHandler GetChartImageCompleted;
        
        /// <remarks/>
        public event GetChartsBlotterWithDateTimeFixedBarsCompletedEventHandler GetChartsBlotterWithDateTimeFixedBarsCompleted;
        
        /// <remarks/>
        public event GetHistoricalSpreadsCompletedEventHandler GetHistoricalSpreadsCompleted;
        
        /// <remarks/>
        public event GetRateComparisonChartDataCompletedEventHandler GetRateComparisonChartDataCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticatorValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.GainCapital.com.WebServices/GetChartBlotter", RequestNamespace="www.GainCapital.com.WebServices/", ResponseNamespace="www.GainCapital.com.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartData GetChartBlotter(string Token, string Product, TimeFrame TimeInterval) {
            object[] results = this.Invoke("GetChartBlotter", new object[] {
                        Token,
                        Product,
                        TimeInterval});
            return ((ChartData)(results[0]));
        }
        
        /// <remarks/>
        public void GetChartBlotterAsync(string Token, string Product, TimeFrame TimeInterval) {
            this.GetChartBlotterAsync(Token, Product, TimeInterval, null);
        }
        
        /// <remarks/>
        public void GetChartBlotterAsync(string Token, string Product, TimeFrame TimeInterval, object userState) {
            if ((this.GetChartBlotterOperationCompleted == null)) {
                this.GetChartBlotterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChartBlotterOperationCompleted);
            }
            this.InvokeAsync("GetChartBlotter", new object[] {
                        Token,
                        Product,
                        TimeInterval}, this.GetChartBlotterOperationCompleted, userState);
        }
        
        private void OnGetChartBlotterOperationCompleted(object arg) {
            if ((this.GetChartBlotterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChartBlotterCompleted(this, new GetChartBlotterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticatorValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.GainCapital.com.WebServices/GetLatestChartData", RequestNamespace="www.GainCapital.com.WebServices/", ResponseNamespace="www.GainCapital.com.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartData GetLatestChartData(string Token, string Product, TimeFrame TimeInterval, System.DateTime Datetime) {
            object[] results = this.Invoke("GetLatestChartData", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        Datetime});
            return ((ChartData)(results[0]));
        }
        
        /// <remarks/>
        public void GetLatestChartDataAsync(string Token, string Product, TimeFrame TimeInterval, System.DateTime Datetime) {
            this.GetLatestChartDataAsync(Token, Product, TimeInterval, Datetime, null);
        }
        
        /// <remarks/>
        public void GetLatestChartDataAsync(string Token, string Product, TimeFrame TimeInterval, System.DateTime Datetime, object userState) {
            if ((this.GetLatestChartDataOperationCompleted == null)) {
                this.GetLatestChartDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLatestChartDataOperationCompleted);
            }
            this.InvokeAsync("GetLatestChartData", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        Datetime}, this.GetLatestChartDataOperationCompleted, userState);
        }
        
        private void OnGetLatestChartDataOperationCompleted(object arg) {
            if ((this.GetLatestChartDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLatestChartDataCompleted(this, new GetLatestChartDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticatorValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.GainCapital.com.WebServices/GetPreviousChartData", RequestNamespace="www.GainCapital.com.WebServices/", ResponseNamespace="www.GainCapital.com.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartData GetPreviousChartData(string Token, string Product, TimeFrame TimeInterval, System.DateTime DateTime) {
            object[] results = this.Invoke("GetPreviousChartData", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        DateTime});
            return ((ChartData)(results[0]));
        }
        
        /// <remarks/>
        public void GetPreviousChartDataAsync(string Token, string Product, TimeFrame TimeInterval, System.DateTime DateTime) {
            this.GetPreviousChartDataAsync(Token, Product, TimeInterval, DateTime, null);
        }
        
        /// <remarks/>
        public void GetPreviousChartDataAsync(string Token, string Product, TimeFrame TimeInterval, System.DateTime DateTime, object userState) {
            if ((this.GetPreviousChartDataOperationCompleted == null)) {
                this.GetPreviousChartDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPreviousChartDataOperationCompleted);
            }
            this.InvokeAsync("GetPreviousChartData", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        DateTime}, this.GetPreviousChartDataOperationCompleted, userState);
        }
        
        private void OnGetPreviousChartDataOperationCompleted(object arg) {
            if ((this.GetPreviousChartDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPreviousChartDataCompleted(this, new GetPreviousChartDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticatorValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.GainCapital.com.WebServices/GetChartData", RequestNamespace="www.GainCapital.com.WebServices/", ResponseNamespace="www.GainCapital.com.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartData GetChartData(string Token, string Product, TimeFrame TimeInterval, System.DateTime startDateTime, System.DateTime endDateTime) {
            object[] results = this.Invoke("GetChartData", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        startDateTime,
                        endDateTime});
            return ((ChartData)(results[0]));
        }
        
        /// <remarks/>
        public void GetChartDataAsync(string Token, string Product, TimeFrame TimeInterval, System.DateTime startDateTime, System.DateTime endDateTime) {
            this.GetChartDataAsync(Token, Product, TimeInterval, startDateTime, endDateTime, null);
        }
        
        /// <remarks/>
        public void GetChartDataAsync(string Token, string Product, TimeFrame TimeInterval, System.DateTime startDateTime, System.DateTime endDateTime, object userState) {
            if ((this.GetChartDataOperationCompleted == null)) {
                this.GetChartDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChartDataOperationCompleted);
            }
            this.InvokeAsync("GetChartData", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        startDateTime,
                        endDateTime}, this.GetChartDataOperationCompleted, userState);
        }
        
        private void OnGetChartDataOperationCompleted(object arg) {
            if ((this.GetChartDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChartDataCompleted(this, new GetChartDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticatorValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.GainCapital.com.WebServices/GetFlashChartData", RequestNamespace="www.GainCapital.com.WebServices/", ResponseNamespace="www.GainCapital.com.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartData GetFlashChartData(string Token, string Product, TimeFrame TimeInterval) {
            object[] results = this.Invoke("GetFlashChartData", new object[] {
                        Token,
                        Product,
                        TimeInterval});
            return ((ChartData)(results[0]));
        }
        
        /// <remarks/>
        public void GetFlashChartDataAsync(string Token, string Product, TimeFrame TimeInterval) {
            this.GetFlashChartDataAsync(Token, Product, TimeInterval, null);
        }
        
        /// <remarks/>
        public void GetFlashChartDataAsync(string Token, string Product, TimeFrame TimeInterval, object userState) {
            if ((this.GetFlashChartDataOperationCompleted == null)) {
                this.GetFlashChartDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFlashChartDataOperationCompleted);
            }
            this.InvokeAsync("GetFlashChartData", new object[] {
                        Token,
                        Product,
                        TimeInterval}, this.GetFlashChartDataOperationCompleted, userState);
        }
        
        private void OnGetFlashChartDataOperationCompleted(object arg) {
            if ((this.GetFlashChartDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFlashChartDataCompleted(this, new GetFlashChartDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticatorValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.GainCapital.com.WebServices/GetAnonymousFlashChartData", RequestNamespace="www.GainCapital.com.WebServices/", ResponseNamespace="www.GainCapital.com.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartData GetAnonymousFlashChartData(string Token, string Product, TimeFrame TimeInterval, bool IBRates) {
            object[] results = this.Invoke("GetAnonymousFlashChartData", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        IBRates});
            return ((ChartData)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnonymousFlashChartDataAsync(string Token, string Product, TimeFrame TimeInterval, bool IBRates) {
            this.GetAnonymousFlashChartDataAsync(Token, Product, TimeInterval, IBRates, null);
        }
        
        /// <remarks/>
        public void GetAnonymousFlashChartDataAsync(string Token, string Product, TimeFrame TimeInterval, bool IBRates, object userState) {
            if ((this.GetAnonymousFlashChartDataOperationCompleted == null)) {
                this.GetAnonymousFlashChartDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnonymousFlashChartDataOperationCompleted);
            }
            this.InvokeAsync("GetAnonymousFlashChartData", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        IBRates}, this.GetAnonymousFlashChartDataOperationCompleted, userState);
        }
        
        private void OnGetAnonymousFlashChartDataOperationCompleted(object arg) {
            if ((this.GetAnonymousFlashChartDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnonymousFlashChartDataCompleted(this, new GetAnonymousFlashChartDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticatorValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.GainCapital.com.WebServices/GetAnonymousChartBlotter", RequestNamespace="www.GainCapital.com.WebServices/", ResponseNamespace="www.GainCapital.com.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartData GetAnonymousChartBlotter(string Token, string Product, TimeFrame TimeInterval, bool IBRates) {
            object[] results = this.Invoke("GetAnonymousChartBlotter", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        IBRates});
            return ((ChartData)(results[0]));
        }
        
        /// <remarks/>
        public void GetAnonymousChartBlotterAsync(string Token, string Product, TimeFrame TimeInterval, bool IBRates) {
            this.GetAnonymousChartBlotterAsync(Token, Product, TimeInterval, IBRates, null);
        }
        
        /// <remarks/>
        public void GetAnonymousChartBlotterAsync(string Token, string Product, TimeFrame TimeInterval, bool IBRates, object userState) {
            if ((this.GetAnonymousChartBlotterOperationCompleted == null)) {
                this.GetAnonymousChartBlotterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAnonymousChartBlotterOperationCompleted);
            }
            this.InvokeAsync("GetAnonymousChartBlotter", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        IBRates}, this.GetAnonymousChartBlotterOperationCompleted, userState);
        }
        
        private void OnGetAnonymousChartBlotterOperationCompleted(object arg) {
            if ((this.GetAnonymousChartBlotterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAnonymousChartBlotterCompleted(this, new GetAnonymousChartBlotterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticatorValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.GainCapital.com.WebServices/GetChartsBlotterWithFixedBars", RequestNamespace="www.GainCapital.com.WebServices/", ResponseNamespace="www.GainCapital.com.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartData GetChartsBlotterWithFixedBars(string Token, string Product, TimeFrame TimeInterval, int Bars) {
            object[] results = this.Invoke("GetChartsBlotterWithFixedBars", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        Bars});
            return ((ChartData)(results[0]));
        }
        
        /// <remarks/>
        public void GetChartsBlotterWithFixedBarsAsync(string Token, string Product, TimeFrame TimeInterval, int Bars) {
            this.GetChartsBlotterWithFixedBarsAsync(Token, Product, TimeInterval, Bars, null);
        }
        
        /// <remarks/>
        public void GetChartsBlotterWithFixedBarsAsync(string Token, string Product, TimeFrame TimeInterval, int Bars, object userState) {
            if ((this.GetChartsBlotterWithFixedBarsOperationCompleted == null)) {
                this.GetChartsBlotterWithFixedBarsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChartsBlotterWithFixedBarsOperationCompleted);
            }
            this.InvokeAsync("GetChartsBlotterWithFixedBars", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        Bars}, this.GetChartsBlotterWithFixedBarsOperationCompleted, userState);
        }
        
        private void OnGetChartsBlotterWithFixedBarsOperationCompleted(object arg) {
            if ((this.GetChartsBlotterWithFixedBarsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChartsBlotterWithFixedBarsCompleted(this, new GetChartsBlotterWithFixedBarsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticatorValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.GainCapital.com.WebServices/GetChartImage", RequestNamespace="www.GainCapital.com.WebServices/", ResponseNamespace="www.GainCapital.com.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartImage GetChartImage(string Token, string Product, TimeFrame TimeInterval, string chartType) {
            object[] results = this.Invoke("GetChartImage", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        chartType});
            return ((ChartImage)(results[0]));
        }
        
        /// <remarks/>
        public void GetChartImageAsync(string Token, string Product, TimeFrame TimeInterval, string chartType) {
            this.GetChartImageAsync(Token, Product, TimeInterval, chartType, null);
        }
        
        /// <remarks/>
        public void GetChartImageAsync(string Token, string Product, TimeFrame TimeInterval, string chartType, object userState) {
            if ((this.GetChartImageOperationCompleted == null)) {
                this.GetChartImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChartImageOperationCompleted);
            }
            this.InvokeAsync("GetChartImage", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        chartType}, this.GetChartImageOperationCompleted, userState);
        }
        
        private void OnGetChartImageOperationCompleted(object arg) {
            if ((this.GetChartImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChartImageCompleted(this, new GetChartImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticatorValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.GainCapital.com.WebServices/GetChartsBlotterWithDateTimeFixedBars", RequestNamespace="www.GainCapital.com.WebServices/", ResponseNamespace="www.GainCapital.com.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ChartData GetChartsBlotterWithDateTimeFixedBars(string Token, string Product, TimeFrame TimeInterval, System.DateTime startDateTime, System.DateTime endDateTime, int Bars) {
            object[] results = this.Invoke("GetChartsBlotterWithDateTimeFixedBars", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        startDateTime,
                        endDateTime,
                        Bars});
            return ((ChartData)(results[0]));
        }
        
        /// <remarks/>
        public void GetChartsBlotterWithDateTimeFixedBarsAsync(string Token, string Product, TimeFrame TimeInterval, System.DateTime startDateTime, System.DateTime endDateTime, int Bars) {
            this.GetChartsBlotterWithDateTimeFixedBarsAsync(Token, Product, TimeInterval, startDateTime, endDateTime, Bars, null);
        }
        
        /// <remarks/>
        public void GetChartsBlotterWithDateTimeFixedBarsAsync(string Token, string Product, TimeFrame TimeInterval, System.DateTime startDateTime, System.DateTime endDateTime, int Bars, object userState) {
            if ((this.GetChartsBlotterWithDateTimeFixedBarsOperationCompleted == null)) {
                this.GetChartsBlotterWithDateTimeFixedBarsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChartsBlotterWithDateTimeFixedBarsOperationCompleted);
            }
            this.InvokeAsync("GetChartsBlotterWithDateTimeFixedBars", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        startDateTime,
                        endDateTime,
                        Bars}, this.GetChartsBlotterWithDateTimeFixedBarsOperationCompleted, userState);
        }
        
        private void OnGetChartsBlotterWithDateTimeFixedBarsOperationCompleted(object arg) {
            if ((this.GetChartsBlotterWithDateTimeFixedBarsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChartsBlotterWithDateTimeFixedBarsCompleted(this, new GetChartsBlotterWithDateTimeFixedBarsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticatorValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.GainCapital.com.WebServices/GetHistoricalSpreads", RequestNamespace="www.GainCapital.com.WebServices/", ResponseNamespace="www.GainCapital.com.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BlotterOfSpread GetHistoricalSpreads(string Token, string Product, TimeFrame TimeInterval, string SpreadGroup, System.DateTime StartDateTime, System.DateTime EndDateTime) {
            object[] results = this.Invoke("GetHistoricalSpreads", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        SpreadGroup,
                        StartDateTime,
                        EndDateTime});
            return ((BlotterOfSpread)(results[0]));
        }
        
        /// <remarks/>
        public void GetHistoricalSpreadsAsync(string Token, string Product, TimeFrame TimeInterval, string SpreadGroup, System.DateTime StartDateTime, System.DateTime EndDateTime) {
            this.GetHistoricalSpreadsAsync(Token, Product, TimeInterval, SpreadGroup, StartDateTime, EndDateTime, null);
        }
        
        /// <remarks/>
        public void GetHistoricalSpreadsAsync(string Token, string Product, TimeFrame TimeInterval, string SpreadGroup, System.DateTime StartDateTime, System.DateTime EndDateTime, object userState) {
            if ((this.GetHistoricalSpreadsOperationCompleted == null)) {
                this.GetHistoricalSpreadsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHistoricalSpreadsOperationCompleted);
            }
            this.InvokeAsync("GetHistoricalSpreads", new object[] {
                        Token,
                        Product,
                        TimeInterval,
                        SpreadGroup,
                        StartDateTime,
                        EndDateTime}, this.GetHistoricalSpreadsOperationCompleted, userState);
        }
        
        private void OnGetHistoricalSpreadsOperationCompleted(object arg) {
            if ((this.GetHistoricalSpreadsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHistoricalSpreadsCompleted(this, new GetHistoricalSpreadsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("AuthenticatorValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("www.GainCapital.com.WebServices/GetRateComparisonChartData", RequestNamespace="www.GainCapital.com.WebServices/", ResponseNamespace="www.GainCapital.com.WebServices/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BlotterOfSpread GetRateComparisonChartData(string Token, Side Side, string Provider1, string Provider2, string Product, TimeFrame TimeInterval, string SpreadGroup, int NoOfRecords, int BlackOutMinutes) {
            object[] results = this.Invoke("GetRateComparisonChartData", new object[] {
                        Token,
                        Side,
                        Provider1,
                        Provider2,
                        Product,
                        TimeInterval,
                        SpreadGroup,
                        NoOfRecords,
                        BlackOutMinutes});
            return ((BlotterOfSpread)(results[0]));
        }
        
        /// <remarks/>
        public void GetRateComparisonChartDataAsync(string Token, Side Side, string Provider1, string Provider2, string Product, TimeFrame TimeInterval, string SpreadGroup, int NoOfRecords, int BlackOutMinutes) {
            this.GetRateComparisonChartDataAsync(Token, Side, Provider1, Provider2, Product, TimeInterval, SpreadGroup, NoOfRecords, BlackOutMinutes, null);
        }
        
        /// <remarks/>
        public void GetRateComparisonChartDataAsync(string Token, Side Side, string Provider1, string Provider2, string Product, TimeFrame TimeInterval, string SpreadGroup, int NoOfRecords, int BlackOutMinutes, object userState) {
            if ((this.GetRateComparisonChartDataOperationCompleted == null)) {
                this.GetRateComparisonChartDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRateComparisonChartDataOperationCompleted);
            }
            this.InvokeAsync("GetRateComparisonChartData", new object[] {
                        Token,
                        Side,
                        Provider1,
                        Provider2,
                        Product,
                        TimeInterval,
                        SpreadGroup,
                        NoOfRecords,
                        BlackOutMinutes}, this.GetRateComparisonChartDataOperationCompleted, userState);
        }
        
        private void OnGetRateComparisonChartDataOperationCompleted(object arg) {
            if ((this.GetRateComparisonChartDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRateComparisonChartDataCompleted(this, new GetRateComparisonChartDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="www.GainCapital.com.WebServices/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="www.GainCapital.com.WebServices/", IsNullable=false)]
    public partial class Authenticator : System.Web.Services.Protocols.SoapHeader {
        
        private string applicationNameField;
        
        private string iPAddressField;
        
        private string machineNameField;
        
        private string languageField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string ApplicationName {
            get {
                return this.applicationNameField;
            }
            set {
                this.applicationNameField = value;
            }
        }
        
        /// <remarks/>
        public string IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
        
        /// <remarks/>
        public string MachineName {
            get {
                return this.machineNameField;
            }
            set {
                this.machineNameField = value;
            }
        }
        
        /// <remarks/>
        public string Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="www.GainCapital.com.WebServices/")]
    public partial class Spread {
        
        private string providerField;
        
        private string currencyPairField;
        
        private System.DateTime timeField;
        
        private string openField;
        
        private string highField;
        
        private string averageField;
        
        private string lowField;
        
        private string closeField;
        
        /// <remarks/>
        public string Provider {
            get {
                return this.providerField;
            }
            set {
                this.providerField = value;
            }
        }
        
        /// <remarks/>
        public string CurrencyPair {
            get {
                return this.currencyPairField;
            }
            set {
                this.currencyPairField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        public string Open {
            get {
                return this.openField;
            }
            set {
                this.openField = value;
            }
        }
        
        /// <remarks/>
        public string High {
            get {
                return this.highField;
            }
            set {
                this.highField = value;
            }
        }
        
        /// <remarks/>
        public string Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
            }
        }
        
        /// <remarks/>
        public string Low {
            get {
                return this.lowField;
            }
            set {
                this.lowField = value;
            }
        }
        
        /// <remarks/>
        public string Close {
            get {
                return this.closeField;
            }
            set {
                this.closeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="www.GainCapital.com.WebServices/")]
    public partial class BlotterOfSpread {
        
        private Spread[] outputField;
        
        private bool successField;
        
        private string messageField;
        
        private string errorNoField;
        
        /// <remarks/>
        public Spread[] Output {
            get {
                return this.outputField;
            }
            set {
                this.outputField = value;
            }
        }
        
        /// <remarks/>
        public bool Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorNo {
            get {
                return this.errorNoField;
            }
            set {
                this.errorNoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="www.GainCapital.com.WebServices/")]
    public partial class ChartImage {
        
        private bool successField;
        
        private string messageField;
        
        private string errorNoField;
        
        private byte[] imageField;
        
        /// <remarks/>
        public bool Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorNo {
            get {
                return this.errorNoField;
            }
            set {
                this.errorNoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Image {
            get {
                return this.imageField;
            }
            set {
                this.imageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="www.GainCapital.com.WebServices/")]
    public partial class ChartData {
        
        private string productField;
        
        private string dataField;
        
        private bool successField;
        
        private string messageField;
        
        private string errorNoField;
        
        /// <remarks/>
        public string Product {
            get {
                return this.productField;
            }
            set {
                this.productField = value;
            }
        }
        
        /// <remarks/>
        public string Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        public bool Success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorNo {
            get {
                return this.errorNoField;
            }
            set {
                this.errorNoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="www.GainCapital.com.WebServices/")]
    public enum TimeFrame {
        
        /// <remarks/>
        ONE_MINUTE,
        
        /// <remarks/>
        FIVE_MINUTE,
        
        /// <remarks/>
        TEN_MINUTE,
        
        /// <remarks/>
        FIFTEEN_MINUTE,
        
        /// <remarks/>
        THIRTY_MINUTE,
        
        /// <remarks/>
        ONE_HOUR,
        
        /// <remarks/>
        TWO_HOUR,
        
        /// <remarks/>
        FOUR_HOUR,
        
        /// <remarks/>
        DAILY,
        
        /// <remarks/>
        WEEKLY,
        
        /// <remarks/>
        MONTHLY,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="www.GainCapital.com.WebServices/")]
    public enum Side {
        
        /// <remarks/>
        Bid,
        
        /// <remarks/>
        Ask,
        
        /// <remarks/>
        Mid,
        
        /// <remarks/>
        Spread,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetChartBlotterCompletedEventHandler(object sender, GetChartBlotterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChartBlotterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChartBlotterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetLatestChartDataCompletedEventHandler(object sender, GetLatestChartDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLatestChartDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLatestChartDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetPreviousChartDataCompletedEventHandler(object sender, GetPreviousChartDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPreviousChartDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPreviousChartDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetChartDataCompletedEventHandler(object sender, GetChartDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChartDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChartDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetFlashChartDataCompletedEventHandler(object sender, GetFlashChartDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFlashChartDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFlashChartDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetAnonymousFlashChartDataCompletedEventHandler(object sender, GetAnonymousFlashChartDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnonymousFlashChartDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnonymousFlashChartDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetAnonymousChartBlotterCompletedEventHandler(object sender, GetAnonymousChartBlotterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAnonymousChartBlotterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAnonymousChartBlotterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetChartsBlotterWithFixedBarsCompletedEventHandler(object sender, GetChartsBlotterWithFixedBarsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChartsBlotterWithFixedBarsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChartsBlotterWithFixedBarsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetChartImageCompletedEventHandler(object sender, GetChartImageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChartImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChartImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartImage Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartImage)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetChartsBlotterWithDateTimeFixedBarsCompletedEventHandler(object sender, GetChartsBlotterWithDateTimeFixedBarsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChartsBlotterWithDateTimeFixedBarsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetChartsBlotterWithDateTimeFixedBarsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ChartData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ChartData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetHistoricalSpreadsCompletedEventHandler(object sender, GetHistoricalSpreadsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHistoricalSpreadsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHistoricalSpreadsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BlotterOfSpread Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BlotterOfSpread)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    public delegate void GetRateComparisonChartDataCompletedEventHandler(object sender, GetRateComparisonChartDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.34209")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRateComparisonChartDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRateComparisonChartDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BlotterOfSpread Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BlotterOfSpread)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591